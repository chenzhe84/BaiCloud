// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: app/app.proto

/*
Package service_metadata_app is a generated protocol buffer package.

It is generated from these files:
	app/app.proto

It has these top-level messages:
	App
	Module
	Form
	Response
	AppResponse
	ModuleResponse
	FormResponse
*/
package service_metadata_app

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AppService service

type AppService interface {
	SaveApp(ctx context.Context, in *App, opts ...client.CallOption) (*Response, error)
	GetApp(ctx context.Context, in *App, opts ...client.CallOption) (*AppResponse, error)
	SaveModule(ctx context.Context, in *Module, opts ...client.CallOption) (*Response, error)
	GetModule(ctx context.Context, in *Module, opts ...client.CallOption) (*ModuleResponse, error)
	SaveForm(ctx context.Context, in *Form, opts ...client.CallOption) (*Response, error)
	GetForm(ctx context.Context, in *Form, opts ...client.CallOption) (*FormResponse, error)
}

type appService struct {
	c    client.Client
	name string
}

func NewAppService(name string, c client.Client) AppService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "service.metadata.app"
	}
	return &appService{
		c:    c,
		name: name,
	}
}

func (c *appService) SaveApp(ctx context.Context, in *App, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppService.SaveApp", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) GetApp(ctx context.Context, in *App, opts ...client.CallOption) (*AppResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.GetApp", in)
	out := new(AppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) SaveModule(ctx context.Context, in *Module, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppService.SaveModule", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) GetModule(ctx context.Context, in *Module, opts ...client.CallOption) (*ModuleResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.GetModule", in)
	out := new(ModuleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) SaveForm(ctx context.Context, in *Form, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppService.SaveForm", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) GetForm(ctx context.Context, in *Form, opts ...client.CallOption) (*FormResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.GetForm", in)
	out := new(FormResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppService service

type AppServiceHandler interface {
	SaveApp(context.Context, *App, *Response) error
	GetApp(context.Context, *App, *AppResponse) error
	SaveModule(context.Context, *Module, *Response) error
	GetModule(context.Context, *Module, *ModuleResponse) error
	SaveForm(context.Context, *Form, *Response) error
	GetForm(context.Context, *Form, *FormResponse) error
}

func RegisterAppServiceHandler(s server.Server, hdlr AppServiceHandler, opts ...server.HandlerOption) error {
	type appService interface {
		SaveApp(ctx context.Context, in *App, out *Response) error
		GetApp(ctx context.Context, in *App, out *AppResponse) error
		SaveModule(ctx context.Context, in *Module, out *Response) error
		GetModule(ctx context.Context, in *Module, out *ModuleResponse) error
		SaveForm(ctx context.Context, in *Form, out *Response) error
		GetForm(ctx context.Context, in *Form, out *FormResponse) error
	}
	type AppService struct {
		appService
	}
	h := &appServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AppService{h}, opts...))
}

type appServiceHandler struct {
	AppServiceHandler
}

func (h *appServiceHandler) SaveApp(ctx context.Context, in *App, out *Response) error {
	return h.AppServiceHandler.SaveApp(ctx, in, out)
}

func (h *appServiceHandler) GetApp(ctx context.Context, in *App, out *AppResponse) error {
	return h.AppServiceHandler.GetApp(ctx, in, out)
}

func (h *appServiceHandler) SaveModule(ctx context.Context, in *Module, out *Response) error {
	return h.AppServiceHandler.SaveModule(ctx, in, out)
}

func (h *appServiceHandler) GetModule(ctx context.Context, in *Module, out *ModuleResponse) error {
	return h.AppServiceHandler.GetModule(ctx, in, out)
}

func (h *appServiceHandler) SaveForm(ctx context.Context, in *Form, out *Response) error {
	return h.AppServiceHandler.SaveForm(ctx, in, out)
}

func (h *appServiceHandler) GetForm(ctx context.Context, in *Form, out *FormResponse) error {
	return h.AppServiceHandler.GetForm(ctx, in, out)
}
